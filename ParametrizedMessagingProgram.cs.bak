using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace SigortaYoxla
{
    /// <summary>
    /// Parametrize edilmiş messaging sistemi test proqramı
    /// </summary>
    class ParametrizedMessagingProgram
    {
        static async Task Main(string[] args)
        {
            var messagingService = new MessagingService();
            
            Console.WriteLine("🚀 Parametrize Messaging System Test");
            Console.WriteLine("=====================================\n");

            try
            {
                // Test 1: Tək WhatsApp mesajı
                await TestSingleWhatsAppMessage(messagingService);
                
                Console.WriteLine("\n" + "=".PadRight(50, '=') + "\n");
                
                // Test 2: Müxtəlif kanallar
                await TestMultiChannelMessages(messagingService);
                
                Console.WriteLine("\n" + "=".PadRight(50, '=') + "\n");
                
                // Test 3: Bulk sığorta mesajları  
                await TestBulkInsuranceMessages(messagingService);
                
                Console.WriteLine("\n" + "=".PadRight(50, '=') + "\n");
                
                // Test 4: İnteraktiv test
                await InteractiveTest(messagingService);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Ümumi xəta: {ex.Message}");
            }
            
            Console.WriteLine("\n✅ Test tamamlandı! Enter basın...");
            Console.ReadLine();
        }

        /// <summary>
        /// Test 1: Tək WhatsApp mesajı
        /// </summary>
        static async Task TestSingleWhatsAppMessage(MessagingService service)
        {
            Console.WriteLine("📱 TEST 1: Tək WhatsApp Mesajı");
            Console.WriteLine("------------------------------");
            
            var message = MessagingService.CreateTestMessage("Salam! Parametrize messaging sistem test ✅");
            var result = await service.SendMessageAsync(message, "994553004661", ChannelEnum.WhatsApp);
            
            DisplayResult(result);
        }

        /// <summary>
        /// Test 2: Müxtəlif kanallar
        /// </summary>
        static async Task TestMultiChannelMessages(MessagingService service)
        {
            Console.WriteLine("📢 TEST 2: Müxtəlif Kanallar");
            Console.WriteLine("----------------------------");
            
            var message = MessagingService.CreateTestMessage("Multi-channel test mesajı");
            
            // WhatsApp
            var whatsappResult = await service.SendMessageAsync(message, "994556875000", ChannelEnum.WhatsApp);
            DisplayResult(whatsappResult);
            
            await Task.Delay(1000);
            
            // SMS (simulasiya)
            var smsResult = await service.SendMessageAsync(message, "994555902205", ChannelEnum.SMS);
            DisplayResult(smsResult);
            
            await Task.Delay(1000);
            
            // Email (simulasiya)
            var emailMessage = new Message 
            { 
                Text = "Bu test email mətndir",
                Subject = "Test Email - Messaging System"
            };
            var emailResult = await service.SendMessageAsync(emailMessage, "test@example.com", ChannelEnum.Email);
            DisplayResult(emailResult);
        }

        /// <summary>
        /// Test 3: Bulk sığorta mesajları
        /// </summary>
        static async Task TestBulkInsuranceMessages(MessagingService service)
        {
            Console.WriteLine("🚗 TEST 3: Bulk Sığorta Mesajları");
            Console.WriteLine("----------------------------------");
            
            var bulkMessages = new List<(Message, string, ChannelEnum)>
            {
                (
                    MessagingService.CreateInsuranceMessage("90HB986", "✅ Sığorta: Aktiv\n📅 Tarix: 15.08.2025\n🏢 Şirkət: ASCO"),
                    "994556875000", 
                    ChannelEnum.WhatsApp
                ),
                (
                    MessagingService.CreateInsuranceMessage("90HB987", "❌ Sığorta: Passiv\n⚠️ Zəruri: Yeniləyin!"),
                    "994555902205", 
                    ChannelEnum.WhatsApp
                ),
                (
                    MessagingService.CreateInsuranceMessage("90HB988", "✅ Sığorta: Aktiv\n📅 Tarix: 20.09.2025\n🏢 Şirkət: ATƏŞGAH"),
                    "994553167781", 
                    ChannelEnum.WhatsApp
                )
            };
            
            var results = await service.SendBulkMessagesAsync(bulkMessages);
            
            Console.WriteLine($"\n📊 BULK NƏTİCƏLƏR ({results.Count} mesaj):");
            Console.WriteLine("=".PadRight(40, '='));
            
            foreach (var result in results)
            {
                DisplayResult(result);
            }
        }

        /// <summary>
        /// Test 4: İnteraktiv test
        /// </summary>
        static async Task InteractiveTest(MessagingService service)
        {
            Console.WriteLine("🎮 TEST 4: İnteraktiv Test");
            Console.WriteLine("---------------------------");
            
            Console.Write("Telefon nömrəsi daxil edin: ");
            var phoneNumber = Console.ReadLine();
            
            if (string.IsNullOrEmpty(phoneNumber))
            {
                Console.WriteLine("❌ Telefon nömrəsi daxil edilmədi!");
                return;
            }
            
            Console.Write("Mesaj mətni daxil edin: ");
            var messageText = Console.ReadLine();
            
            if (string.IsNullOrEmpty(messageText))
            {
                messageText = "İnteraktiv test mesajı";
            }
            
            Console.WriteLine("\nKanalı seçin:");
            Console.WriteLine("1. WhatsApp");
            Console.WriteLine("2. SMS (simulasiya)");
            Console.WriteLine("3. Email (simulasiya)");
            Console.Write("Seçim (1-3): ");
            
            var choice = Console.ReadLine();
            var channel = choice switch
            {
                "1" => ChannelEnum.WhatsApp,
                "2" => ChannelEnum.SMS,
                "3" => ChannelEnum.Email,
                _ => ChannelEnum.WhatsApp
            };
            
            var message = MessagingService.CreateTestMessage(messageText);
            var result = await service.SendMessageAsync(message, phoneNumber, channel);
            
            Console.WriteLine("\n📋 İnteraktiv Test Nəticəsi:");
            DisplayResult(result);
        }

        /// <summary>
        /// Nəticəni ekranda göstərir
        /// </summary>
        static void DisplayResult(MessageResult result)
        {
            var status = result.Success ? "✅" : "❌";
            Console.WriteLine($"{status} {result.Channel}: {result.Recipient}");
            
            if (result.Success)
            {
                Console.WriteLine($"   📤 ID: {result.MessageId}");
                Console.WriteLine($"   🕒 Vaxt: {result.SentAt:HH:mm:ss}");
            }
            else
            {
                Console.WriteLine($"   ❌ Xəta: {result.Error}");
            }
            
            Console.WriteLine();
        }
    }
}
