using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.IO;
using Hangfire;
using Sigortamat.Services;
using Sigortamat.Models;
using Microsoft.Extensions.Configuration;

namespace Sigortamat.Jobs
{
    /// <summary>
    /// Sƒ±ƒüorta yoxlama job-u - Yeni normalla≈üdƒ±rƒ±lmƒ±≈ü sistem
    /// </summary>
    public class InsuranceJobHandler
    {
        private readonly IServiceProvider _serviceProvider;

        public InsuranceJobHandler(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
            Console.WriteLine($"üîß Insurance Service rejimi: Real Selenium WebDriver");
        }

        /// <summary>
        /// Yeni sƒ±ƒüorta yoxlama job-u - h…ôr d…ôqiq…ô i≈ül…ôyir
        /// </summary>
        [Queue("insurance")]
        [DisableConcurrentExecution(timeoutInSeconds: 10 * 60)]
        public async Task ProcessInsuranceQueue()
        {
            Console.WriteLine("\nüöó Sƒ∞GORTA JOB BA≈ûLADI (Yeni sistem)");

            // DI pattern - service locator with null checks
            var queueRepository = (QueueRepository)_serviceProvider.GetService(typeof(QueueRepository));
            var renewalTrackingService = (RenewalTrackingService)_serviceProvider.GetService(typeof(RenewalTrackingService));
            var insuranceJobRepository = (InsuranceJobRepository)_serviceProvider.GetService(typeof(InsuranceJobRepository));
            var insuranceService = (InsuranceService)_serviceProvider.GetService(typeof(InsuranceService));
            
            Console.WriteLine($"üîç DEBUG: Services - QueueRepo: {queueRepository != null}, RenewalTracking: {renewalTrackingService != null}, JobRepo: {insuranceJobRepository != null}, InsuranceService: {insuranceService != null}");
            
            if (queueRepository == null || renewalTrackingService == null || insuranceJobRepository == null || insuranceService == null)
            {
                Console.WriteLine("‚ùå Service resolution failed - one or more services are null");
                return;
            }

            int processedCount = 0;
            while (true)
            {
                var queue = queueRepository.DequeueAndMarkAsProcessing("insurance");

                if (queue == null)
                {
                    // No more jobs to process
                    break;
                }
                
                processedCount++;
                var stopwatch = Stopwatch.StartNew();
                try
                {
                    Console.WriteLine($"\nüîÑ Queue i≈ül…ônir: ID {queue.Id} (Type: {queue.Type}, Status: {queue.Status})");

                    var job = await insuranceJobRepository.GetByQueueIdAsync(queue.Id);
                    if (job == null)
                    {
                        Console.WriteLine($"‚ö†Ô∏è Queue {queue.Id} √º√ß√ºn InsuranceJob tapƒ±lmadƒ± - data inconsistency");
                        continue;
                    }

                    var result = await insuranceService.CheckInsuranceAsync(job);
                    Console.WriteLine($"üîç DEBUG: InsuranceService result - Success: {result.Success}, ResultText: {result.ResultText}");

                    // N…ôtic…ôni d…ôrhal InsuranceJob c…ôdv…ôlind…ô yenil…ô
                    await insuranceJobRepository.UpdateJobResultAsync(job.Id, result, stopwatch.ElapsedMilliseconds);

                    if (result.Success)
                    {
                        Console.WriteLine($"‚úÖ DEBUG: Result.Success = true, ProcessRenewalResultAsync √ßaƒüƒ±rƒ±lƒ±r - Job ID: {job.Id}");
                        try 
                        {
                            await renewalTrackingService.ProcessRenewalResultAsync(job);
                            queueRepository.MarkAsCompleted(queue.Id);
                            Console.WriteLine($"‚úÖ DEBUG: ProcessRenewalResultAsync tamamlandƒ± v…ô queue completed - Job ID: {job.Id}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå ProcessRenewalResultAsync x…ôtasƒ±: {ex.Message}");
                            Console.WriteLine($"‚ùå StackTrace: {ex.StackTrace}");
                            // ProcessRenewalResultAsync x…ôtasƒ± olsa da queue-nu failed etm…ô
                            // InsuranceService artƒ±q reschedule etmi≈üdir
                        }
                    }
                    else
                    {
                        Console.WriteLine($"‚ùå DEBUG: Result.Success = false, ProcessRenewalResultAsync √ßaƒüƒ±rƒ±lmƒ±r - Job ID: {job.Id}");
                    }
                    // Uƒüursuz olduqda he√ß bir …ôm…ôliyyat etm…ô
                    // InsuranceService artƒ±q RescheduleJob etmi≈üdir
                }
                catch (Exception ex)
                {
                    // Global exception - he√ß bir queue …ôm…ôliyyatƒ± etm…ô
                    // InsuranceService artƒ±q error handling etmi≈üdir
                    Console.WriteLine($"‚ùå X…ôta (Queue {queue.Id}): {ex.Message}");
                }
                finally
                {
                    stopwatch.Stop();
                    Console.WriteLine($"‚úÖ ƒ∞≈ül…ôm…ô tamamlandƒ±: {stopwatch.ElapsedMilliseconds} ms");
                }
            }

            if (processedCount == 0)
            {
                Console.WriteLine("==================================================");
                Console.WriteLine("üìã Proses olunacaq sƒ±ƒüorta i≈üi yoxdur");
            }
            else
            {
                Console.WriteLine($"‚úÖ Sƒ±ƒüorta job tamamlandƒ±: {processedCount} element i≈ül…ôndi");
            }
        }
    }
}
