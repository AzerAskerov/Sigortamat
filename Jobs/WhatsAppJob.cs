using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Hangfire;
using SigortaYoxla.Services;

namespace SigortaYoxla.Jobs
{
    /// <summary>
    /// WhatsApp mesaj g√∂nd…ôrm…ô job-u - Yeni normalla≈üdƒ±rƒ±lmƒ±≈ü sistem
    /// </summary>
    public class WhatsAppJob
    {
        private readonly WhatsAppService _whatsappService;

        public WhatsAppJob()
        {
            _whatsappService = new WhatsAppService();
        }

        /// <summary>
        /// Yeni WhatsApp mesaj g√∂nd…ôrm…ô job-u - h…ôr 2 d…ôqiq…ô i≈ül…ôyir
        /// </summary>
        [Queue("whatsapp")]
        public async Task ProcessWhatsAppQueue()
        {
            Console.WriteLine("\nüì± WHATSAPP JOB BA≈ûLADI (Yeni sistem)");
            Console.WriteLine("=".PadRight(50, '='));
            
            var pendingJobs = WhatsAppJobRepository.GetPendingWhatsAppJobs(3);
            
            if (pendingJobs.Count == 0)
            {
                Console.WriteLine("üìã Proses olunacaq WhatsApp i≈üi yoxdur");
                return;
            }

            Console.WriteLine($"üìã {pendingJobs.Count} WhatsApp i≈üi tapƒ±ldƒ±");

            foreach (var job in pendingJobs)
            {
                var stopwatch = Stopwatch.StartNew();
                try
                {
                    Console.WriteLine($"\nüîÑ ƒ∞≈ül…ônir: {job.PhoneNumber} (Queue ID: {job.QueueId})");
                    Console.WriteLine($"   Mesaj: {job.MessageText.Substring(0, Math.Min(50, job.MessageText.Length))}...");
                    
                    // Queue-u processing kimi i≈üar…ôl…ô
                    QueueRepository.MarkAsProcessing(job.QueueId);
                    
                    var success = await _whatsappService.SendMessageAsync(job.PhoneNumber, job.MessageText);
                    stopwatch.Stop();
                    
                    if (success)
                    {
                        // WhatsApp job statusunu yenil…ô
                        WhatsAppJobRepository.UpdateDeliveryStatus(
                            job.QueueId, 
                            "sent", 
                            null,
                            (int)stopwatch.ElapsedMilliseconds
                        );
                        
                        // Queue-u tamamlanmƒ±≈ü kimi i≈üar…ôl…ô
                        QueueRepository.MarkAsCompleted(job.QueueId);
                        Console.WriteLine($"‚úÖ Tamamlandƒ±: {job.PhoneNumber} ({stopwatch.ElapsedMilliseconds}ms)");
                    }
                    else
                    {
                        WhatsAppJobRepository.UpdateDeliveryStatus(
                            job.QueueId, 
                            "failed", 
                            "WhatsApp g√∂nd…ôrm…ô uƒüursuz",
                            (int)stopwatch.ElapsedMilliseconds
                        );
                        
                        QueueRepository.MarkAsFailed(job.QueueId, "WhatsApp g√∂nd…ôrm…ô uƒüursuz");
                        Console.WriteLine($"‚ùå Uƒüursuz: {job.PhoneNumber}");
                    }
                    
                    // Rate limiting - WhatsApp √º√ß√ºn daha uzun g√∂zl…ôm…ô
                    await Task.Delay(3000);
                }
                catch (Exception ex)
                {
                    stopwatch.Stop();
                    WhatsAppJobRepository.UpdateDeliveryStatus(
                        job.QueueId, 
                        "failed", 
                        ex.Message,
                        (int)stopwatch.ElapsedMilliseconds
                    );
                    
                    QueueRepository.MarkAsFailed(job.QueueId, ex.Message);
                    Console.WriteLine($"‚ùå X…ôta: {job.PhoneNumber} - {ex.Message}");
                }
            }

            Console.WriteLine($"‚úÖ WhatsApp job tamamlandƒ±: {pendingJobs.Count} element i≈ül…ôndi");
        }
    }
}
