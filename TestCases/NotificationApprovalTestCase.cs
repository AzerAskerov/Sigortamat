using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Sigortamat.Models;
using Sigortamat.Services;

namespace Sigortamat.TestCases
{
    /// <summary>
    /// Notification approval prosesi test case-i
    /// NotificationService.ApproveAsync() metodunu test edir
    /// </summary>
    public class NotificationApprovalTestCase : TestCaseBase
    {
        private readonly NotificationService _notificationService;
        private readonly LeadService _leadService;

        public NotificationApprovalTestCase(IServiceProvider serviceProvider) : base(serviceProvider)
        {
            _notificationService = serviceProvider.GetRequiredService<NotificationService>();
            _leadService = serviceProvider.GetRequiredService<LeadService>();
        }

        public override string TestName => "Notification Approval Test";

        public override string Description => 
            "Notification-un admin t…ôr…ôfind…ôn approve edilm…ôsi v…ô status d…ôyi≈üiklikl…ôrini test edir";

        protected override string[] GetTestCarNumbers() => new[] { "TEST_APPROVAL" };

        protected override async Task ExecuteTestAsync()
        {
            Console.WriteLine("üöÄ Notification approval workflow test ba≈ülayƒ±r...");
            
            // 1. Test user yaradƒ±rƒ±q
            var user = new User
            {
                CarNumber = "TEST_APPROVAL",
                PhoneNumber = "0507654321",
                NotificationEnabled = true,
                CreatedAt = DateTime.Now
            };
            
            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            Console.WriteLine($"‚úÖ Test User yaradƒ±ldƒ±: ID={user.Id}");

            // 2. Test lead yaradƒ±rƒ±q
            var lead = new Lead
            {
                UserId = user.Id,
                CarNumber = user.CarNumber,
                LeadType = "NoInsuranceImmediate",
                Notes = "Test approval workflow",
                CreatedAt = DateTime.Now
            };
            
            _context.Leads.Add(lead);
            await _context.SaveChangesAsync();
            Console.WriteLine($"‚úÖ Test Lead yaradƒ±ldƒ±: ID={lead.Id}");

            // 3. LeadService.CreateNotificationForLeadAsync √ßaƒüƒ±rƒ±rƒ±q
            Console.WriteLine("üîÑ LeadService.CreateNotificationForLeadAsync() √ßaƒüƒ±rƒ±lƒ±r...");
            await _leadService.CreateNotificationForLeadAsync(lead);
            Console.WriteLine("‚úÖ Notification yaradƒ±ldƒ± v…ô Telegram request g√∂nd…ôrildi (log-da g√∂r√ºn√ºr)");

            // 4. Yaradƒ±lan notification-u tapƒ±rƒ±q
            var notification = await _context.Notifications.FirstOrDefaultAsync(n => n.LeadId == lead.Id);
            if (notification == null)
                throw new Exception("Notification yaradƒ±lmadƒ±!");
            
            Console.WriteLine($"‚úÖ Notification tapƒ±ldƒ±: ID={notification.Id}, Status={notification.Status}");

            // 5. Admin approval simulation edirik
            Console.WriteLine($"üîÑ NotificationService.ApproveAsync({notification.Id}) √ßaƒüƒ±rƒ±lƒ±r...");
            await _notificationService.ApproveAsync(notification.Id);
            Console.WriteLine("‚úÖ Notification approve edildi");

            // 6. Notification status-u "sent"-…ô ke√ßiririk (WhatsApp job simulation)
            Console.WriteLine($"üîÑ NotificationService.MarkAsSentAsync({notification.Id}) √ßaƒüƒ±rƒ±lƒ±r...");
            await _notificationService.MarkAsSentAsync(notification.Id);
            Console.WriteLine("‚úÖ Notification sent kimi qeyd edildi");

            // 7. Error scenario test edirik - yeni notification yaradƒ±b error status veririk
            var errorNotification = new Notification
            {
                LeadId = lead.Id,
                Channel = "wa",
                Message = "Test error notification",
                Status = "pending",
                CreatedAt = DateTime.Now
            };
            
            _context.Notifications.Add(errorNotification);
            await _context.SaveChangesAsync();

            Console.WriteLine($"üîÑ NotificationService.MarkAsErrorAsync({errorNotification.Id}) √ßaƒüƒ±rƒ±lƒ±r...");
            await _notificationService.MarkAsErrorAsync(errorNotification.Id, "Test error message");
            Console.WriteLine("‚úÖ Notification error kimi qeyd edildi");
        }

        protected override async Task VerifyResultsAsync()
        {
            Console.WriteLine("üîç N…ôtic…ôl…ôr yoxlanƒ±lƒ±r...");

            await DisplayDatabaseStateAsync();

            var notifications = await _context.Notifications
                .Where(n => n.Lead.CarNumber == "TEST_APPROVAL")
                .ToListAsync();

            if (notifications.Count < 2)
                throw new Exception($"G√∂zl…ônil…ôn 2 notification, tapƒ±lan: {notifications.Count}");

            // ƒ∞lk notification (approved -> sent)
            var approvedNotification = notifications.FirstOrDefault(n => n.Status == "sent");
            if (approvedNotification == null)
                throw new Exception("Approved v…ô sent notification tapƒ±lmadƒ±!");
            
            if (approvedNotification.ApprovedAt == null)
                throw new Exception("ApprovedAt tarixi set edilm…ôyib!");
            
            if (approvedNotification.SentAt == null)
                throw new Exception("SentAt tarixi set edilm…ôyib!");
            
            Console.WriteLine($"‚úÖ Approved notification: ID={approvedNotification.Id}");
            Console.WriteLine($"   ApprovedAt: {approvedNotification.ApprovedAt:yyyy-MM-dd HH:mm}");
            Console.WriteLine($"   SentAt: {approvedNotification.SentAt:yyyy-MM-dd HH:mm}");

            // ƒ∞kinci notification (error)
            var errorNotification = notifications.FirstOrDefault(n => n.Status == "error");
            if (errorNotification == null)
                throw new Exception("Error notification tapƒ±lmadƒ±!");
            
            Console.WriteLine($"‚úÖ Error notification: ID={errorNotification.Id}, Status={errorNotification.Status}");

            // Telegram log mesajlarƒ±nƒ± yoxla
            Console.WriteLine("üìù Telegram bot log mesajlarƒ± console-da g√∂r√ºnm…ôlidir:");
            Console.WriteLine("   - 'TELEGRAM APPROVAL REQUEST' mesajƒ±");
            Console.WriteLine("   - 'TO IMPLEMENT: Send to admin chat' mesajƒ±");

            Console.WriteLine("üéØ G√∂zl…ônil…ôn b√ºt√ºn ≈ü…ôrtl…ôr √∂d…ônildi!");
        }
    }
} 