using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Sigortamat.Data;
using Sigortamat.Models;
using Sigortamat.Services;
using System;
using System.Threading.Tasks;

namespace Sigortamat.TestCases
{
    /// <summary>
    /// This test case only creates a lead and a notification, then exits.
    /// It's designed for end-to-end testing where the main application will handle the approval.
    /// </summary>
    public class CreateLeadOnlyTestCase : BaseTestCase
    {
        public override string TestName => "Create Lead & Notification Only";
        public override string Description => "YalnÄ±z yeni bir Lead vÉ™ Notification yaradÄ±r vÉ™ Ã§Ä±xÄ±r. Real rejimdÉ™ tÉ™sdiqlÉ™mÉ™ni yoxlamaq Ã¼Ã§Ã¼n istifadÉ™ olunur.";

        public CreateLeadOnlyTestCase(IServiceProvider serviceProvider) : base(serviceProvider) { }

        protected override async Task<TestResult> ExecuteTestAsync()
        {
            var leadService = _serviceProvider.GetRequiredService<LeadService>();
            
            // 1. Create Test Data
            _logger.LogInformation("ğŸ”§ Test Ã¼Ã§Ã¼n mÉ™lumatlar yaradÄ±lÄ±r...");
            var (user, lead) = await CreateTestDataAsync("10RL033", "0707877878", "NoInsuranceImmediate");
            _logger.LogInformation("âœ… Test mÉ™lumatlarÄ± yaradÄ±ldÄ±: User ID={UserId}, Lead ID={LeadId}", user.Id, lead.Id);

            // 2. Call the service to create the notification
            _logger.LogInformation("ğŸš€ LeadService.CreateNotificationForLeadAsync() Ã§aÄŸÄ±rÄ±lÄ±r...");
            await leadService.CreateNotificationForLeadAsync(lead);
            _logger.LogInformation("âœ… Telegram-a tÉ™sdiq sorÄŸusu gÃ¶ndÉ™rildi. Notification ID: {NotificationId}", lead.Id);

            return TestResult.CreateSuccess($"Test uÄŸurla tamamlandÄ±. Telegram-a Notification ID {lead.Id} Ã¼Ã§Ã¼n tÉ™sdiq mesajÄ± gÃ¶ndÉ™rildi. Ä°ndi 'dotnet run' ilÉ™ É™sas proqramÄ± iÅŸÉ™ salÄ±b dÃ¼ymÉ™ni basa bilÉ™rsiniz.");
        }
    }
} 