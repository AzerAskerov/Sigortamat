const { Client, LocalAuth } = require('whatsapp-web.js');

class QuickIntroducer {
    constructor() {
        this.client = new Client({
            authStrategy: new LocalAuth({
                name: 'sigorta-session',
                dataPath: './auth_data'
            }),
            puppeteer: {
                headless: false, // Browser g√∂st…ôririk tanƒ±tma √º√ß√ºn
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox'
                ]
            }
        });
    }

    async introduceContact(phoneNumber) {
        try {
            console.log('üöÄ WhatsApp Quick Introducer ba≈üladƒ±lƒ±r...');
            
            await this.client.initialize();
            
            // Hazƒ±r olana q…ôd…ôr g√∂zl…ôyirik
            while (!this.client.info) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            console.log('‚úÖ WhatsApp Client hazƒ±rdƒ±r!');
            
            // N√∂mr…ôni formatlayƒ±rƒ±q
            const formattedNumber = this.formatPhoneNumber(phoneNumber);
            const chatId = `${formattedNumber}@c.us`;
            
            console.log(`üîç Kontakt tanƒ±dƒ±lƒ±r: ${formattedNumber}`);
            
            // Kontaktƒ± yoxlayƒ±rƒ±q v…ô mesaj g√∂nd…ôririk
            const contact = await this.client.getContactById(chatId);
            console.log(`üë§ Kontakt: ${contact.name || contact.number}`);
            
            // Ki√ßik test mesajƒ± g√∂nd…ôririk
            await this.client.sendMessage(chatId, 'üîÑ Kontakt tanƒ±dƒ±ldƒ± - Smart WhatsApp sistemi');
            console.log('‚úÖ Tanƒ±tma mesajƒ± g√∂nd…ôrildi!');
            
            // 5 saniy…ô g√∂zl…ôyirik
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            await this.client.destroy();
            console.log('‚úÖ Tanƒ±tma tamamlandƒ±!');
            
            return true;
        } catch (error) {
            console.error('‚ùå Tanƒ±tma x…ôtasƒ±:', error.message);
            try {
                await this.client.destroy();
            } catch (e) {
                // Ignore cleanup errors
            }
            return false;
        }
    }

    formatPhoneNumber(phoneNumber) {
        let cleaned = phoneNumber.replace(/\D/g, '');
        if (!cleaned.startsWith('994')) {
            if (cleaned.startsWith('0')) {
                cleaned = '994' + cleaned.substring(1);
            } else {
                cleaned = '994' + cleaned;
            }
        }
        return cleaned;
    }
}

// Komanda s…ôtrind…ôn istifad…ô
async function main() {
    const phoneNumber = process.argv[2];
    
    if (!phoneNumber) {
        console.error('‚ùå Telefon n√∂mr…ôsi t…ôl…ôb olunur!');
        process.exit(1);
    }
    
    const introducer = new QuickIntroducer();
    const success = await introducer.introduceContact(phoneNumber);
    
    process.exit(success ? 0 : 1);
}

if (require.main === module) {
    main().catch(console.error);
}
